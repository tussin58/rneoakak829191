from aiogram import types

from bot import dp
from modules import database


async def control_bot_markup(bot_id) -> types.InlineKeyboardMarkup:
    bot = await database.get_bot(bot_id)
    if not bot:
        return None

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤', callback_data=f'edit_answers_{bot_id}'),
                types.InlineKeyboardButton('üì∞ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', callback_data=f'start_ad_{bot_id}'))
    if bot["status"] == 'stopped':
        markup.add(types.InlineKeyboardButton('üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å', callback_data=f'run_bstatus_{bot_id}'),
                    types.InlineKeyboardButton('‚úã –£–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞', callback_data=f'delete_bot_{bot_id}'))
    else:
        markup.add(types.InlineKeyboardButton('‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', callback_data=f'run_bstatus_{bot_id}'),
                    types.InlineKeyboardButton('‚úã –£–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞', callback_data=f'delete_bot_{bot_id}'))
    if bot["webapp_button"] == 0:
        markup.add(types.InlineKeyboardButton('‚ùå WebApp –≤ —É–≥–ª—É', callback_data=f'webapp_bstatus_{bot_id}'),
                    types.InlineKeyboardButton('üí¨ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ–∫—Å—Ç WebApp', callback_data=f'edit_webapp_text_{bot_id}'))
    else:
        markup.add(types.InlineKeyboardButton('‚úÖ WebApp –≤ —É–≥–ª—É', callback_data=f'webapp_bstatus_{bot_id}'),
                    types.InlineKeyboardButton('üí¨ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ–∫—Å—Ç WebApp', callback_data=f'edit_webapp_text_{bot_id}'))
    markup.add(types.InlineKeyboardButton('üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –¥–æ–º–µ–Ω', callback_data=f'edit_domain_{bot_id}'),
                types.InlineKeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data=f'bot_stats_{bot_id}'))
    markup.add(types.InlineKeyboardButton('üì§ –≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', callback_data=f'export_db_{bot_id}'),
                types.InlineKeyboardButton('‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞', callback_data=f'interval_ad_{bot_id}'))
    markup.add(types.InlineKeyboardButton('üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∞–π–¥–∏', callback_data=f'send_message_{bot_id}'))

    markup.add(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_main_menu'))\
    
    return markup


@dp.callback_query_handler(lambda call: call.data.startswith('control_bot_'))
async def control_bot(call: types.CallbackQuery):
    bot_id = int(call.data.split('_')[2])

    bot = await database.get_bot(bot_id)
    if not bot:
        await call.message.edit_text('ü§ñ _–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω_', parse_mode='Markdown')
        return
    
    markup = await control_bot_markup(bot_id)

    text_buttons = await database.get_text_buttons(bot_id)
    text_buttons_text = ''
    for button in text_buttons:
        text_buttons_text += f'<blockquote>{button["name"]} - {button["text"]}</blockquote>\n'
    text_buttons_text = text_buttons_text if text_buttons_text else "<blockquote>‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã</blockquote>"

    bot_buttons = '\n'.join([f'<blockquote>{button_name.strip()}</blockquote>' for button_name in bot["buttons"].split(',')]) if bot["buttons"] else "<blockquote>‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã</blockquote>"

    await call.message.edit_text(f'ü§ñ <strong>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</strong> #{bot["name"]}\n\n'
                                    f'<strong>ü§ñ –Æ–∑–µ—Ä–Ω–µ–π–º:</strong> @{bot["username"]}\n'
                                    f'<strong>üñº –ú–µ–¥–∏–∞:</strong> {"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ" if bot["media"] else "‚ùå <i>–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</i>"}\n'
                                    f'<strong>üåê –î–æ–º–µ–Ω:</strong> {bot["domain"]}\n'
                                    f'<strong>üí¨ –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ WebApp:</strong> <code>{bot["webapp_button_text"]}</code>\n'
                                    f'<strong>üîΩ –ö–Ω–æ–ø–∫–∏:</strong>\n{bot_buttons}\n\n'
                                    f'<strong>üìù –°—Ç–∞—Ä—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç:</strong>\n<blockquote>{bot["start_text"] if bot["start_text"] else "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"}</blockquote>\n\n'
                                    f'<strong>üìù –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏:</strong>\n{text_buttons_text}',

                                    reply_markup=markup, parse_mode='HTML')