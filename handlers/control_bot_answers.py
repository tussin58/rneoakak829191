import re
import os
from aiogram import types

from bot import dp, user_states
from modules import database


@dp.callback_query_handler(lambda call: call.data.startswith('edit_answers_'))
async def edit_answers(call: types.CallbackQuery):
    bot_id = int(call.data.split('_')[2])

    bot = await database.get_bot(bot_id)
    if not bot:
        await call.message.edit_text('ü§ñ _–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω_', parse_mode='Markdown')
        return
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üìù –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç', callback_data=f'set_start_text_{bot_id}'))
    markup.add(types.InlineKeyboardButton('üñº –î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞', callback_data=f'control_media_{bot_id}'),
                types.InlineKeyboardButton('üîò –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏', callback_data=f'control_buttons_{bot_id}'))
    markup.add(types.InlineKeyboardButton('üí† –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏', callback_data=f'text_buttons_{bot_id}'))
    markup.add(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data=f'control_bot_{bot_id}'))

    await call.message.edit_text('üíÅ‚Äç‚ôÇÔ∏è _–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:_', reply_markup=markup, parse_mode='Markdown')


@dp.callback_query_handler(lambda call: call.data.startswith('set_start_text_'))
async def set_start_text(call: types.CallbackQuery):
    bot_id = int(call.data.split('_')[3])

    user_states[call.from_user.id] = f'set_start_text_{bot_id}'

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üîô –û—Ç–º–µ–Ω–∞', callback_data=f'control_bot_{bot_id}'))

    await call.message.edit_text('''üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞:
_(–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)_

–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:
`{first_name}` - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
`{last_name}` - —Ñ–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
`{username}` - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ @
`{telegram_id}` - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram

–ï—Å–ª–∏ –∫–∞–∫–æ–µ-—Ç–æ –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –æ–Ω–æ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É.''', reply_markup=markup, parse_mode='Markdown')


@dp.message_handler(lambda message: user_states.get(message.from_user.id) and user_states[message.from_user.id].startswith('set_start_text_'))
async def set_start_text(message: types.Message):
    bot_id = int(user_states[message.from_user.id].split('_')[3])

    user_states[message.from_user.id] = None

    await database.update_bot(bot_id, 'start_text', message.html_text)

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data=f'control_bot_{bot_id}'))

    await message.answer('‚úÖ _–°—Ç–∞—Ä—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω_', reply_markup=markup, parse_mode='Markdown')
    

@dp.callback_query_handler(lambda call: call.data.startswith('control_media_'))
async def control_media(call: types.CallbackQuery):
    bot_id = int(call.data.split('_')[2])

    bot = await database.get_bot(bot_id)
    if not bot:
        await call.message.edit_text('ü§ñ _–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω_', parse_mode='Markdown')
        return

    user_states[call.from_user.id] = f'add_media_{bot_id}'

    markup = types.InlineKeyboardMarkup()

    if bot['media']:
        markup.add(types.InlineKeyboardButton('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –º–µ–¥–∏–∞', callback_data=f'delete_media_{bot_id}'))

    markup.add(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data=f'edit_answers_{bot_id}'))

    await call.message.edit_text('üîΩ _–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:_', reply_markup=markup, parse_mode='Markdown')


@dp.message_handler(lambda message: user_states.get(message.from_user.id) and user_states[message.from_user.id].startswith('add_media_'), content_types=['photo'])
async def add_media(message: types.Message):
    bot_id = int(user_states[message.from_user.id].split('_')[2])

    user_states[message.from_user.id] = None

    bot = await database.get_bot(bot_id)
    if not bot:
        await message.answer('ü§ñ _–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω_', parse_mode='Markdown')
        return

    await dp.bot.download_file_by_id(message.photo[-1].file_id, 'data/media/' + str(bot_id) + '.jpg')
    
    await database.update_bot(bot_id, 'media', 'data/media/' + str(bot['id']) + '.jpg')

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data=f'edit_answers_{bot_id}'))

    await message.answer('‚úÖ _–ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!_', reply_markup=markup, parse_mode='Markdown')


@dp.callback_query_handler(lambda call: call.data.startswith('delete_media_'))
async def delete_media(call: types.CallbackQuery):
    bot_id = int(call.data.split('_')[2])

    bot = await database.get_bot(bot_id)
    if not bot:
        await call.message.edit_text('ü§ñ _–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω_', parse_mode='Markdown')
        return

    try:
        os.remove(bot['media'])
    except FileNotFoundError:
        pass

    await database.update_bot(bot_id, 'media', None)

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data=f'edit_answers_{bot_id}'))

    await call.message.edit_text('‚úÖ _–ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –º–µ–¥–∏–∞ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥:_', reply_markup=markup, parse_mode='Markdown')


@dp.callback_query_handler(lambda call: call.data.startswith('control_buttons_'))
async def control_buttons(call: types.CallbackQuery):
    bot_id = int(call.data.split('_')[2])

    bot = await database.get_bot(bot_id)
    if not bot:
        await call.message.edit_text('ü§ñ _–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω_', parse_mode='Markdown')
        return

    user_states[call.from_user.id] = f'control_buttons_{bot_id}'

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data=f'edit_answers_{bot_id}'))

    await call.message.edit_text('''üîò _–í–≤–µ–¥–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:_
_[—Ç–µ–∫—Å—Ç + url] –∏–ª–∏ [—Ç–µ–∫—Å—Ç +_ `webapp`_]
–ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏. –ú–∞–∫—Å–∏–º—É–º 5x5 –∫–Ω–æ–ø–æ–∫.
P.S. Webapp –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–º–µ–Ω–∏—Ç—Å—è –Ω–∞ –≤–µ–±–∞–ø–ø —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –¥–æ–º–µ–Ω–æ–º_''', reply_markup=markup, parse_mode='Markdown')


@dp.message_handler(lambda message: user_states.get(message.from_user.id) and user_states[message.from_user.id].startswith('control_buttons_'))
async def control_buttons(message: types.Message):
    bot_id = int(user_states[message.from_user.id].split('_')[2])

    for line in message.text.split('\n'):
        if not re.compile(r'\[.*\s\+\s(webapp|https://.*)\]').match(line.strip()):
            await message.answer(
                '‚ùå _–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ [—Ç–µ–∫—Å—Ç + URL] –∏–ª–∏ [—Ç–µ–∫—Å—Ç + webapp]_', 
                parse_mode='Markdown'
            )
            return

    user_states[message.from_user.id] = None

    await database.update_bot(bot_id, 'buttons', message.text)

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data=f'edit_answers_{bot_id}'))

    await message.answer('‚úÖ _–ö–Ω–æ–ø–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã_', reply_markup=markup, parse_mode='Markdown')


@dp.callback_query_handler(lambda call: call.data.startswith('text_buttons_'))
async def text_buttons(call: types.CallbackQuery):
    bot_id = int(call.data.split('_')[2])

    bot = await database.get_bot(bot_id)
    if not bot:
        await call.message.edit_text('ü§ñ _–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω_', parse_mode='Markdown')
        return
    
    user_states[call.from_user.id] = f'text_buttons_{bot_id}'

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data=f'edit_answers_{bot_id}'))

    await call.message.edit_text('üîò _–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:_\n_[–ù–∞–∑–≤–∞–Ω–∏–µ + –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏] –∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏_\n\n'
                                 '‚ö†Ô∏è _–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ_ `–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–Ω–æ–ø–∫–∏` _(–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ)_',
                                   reply_markup=markup, parse_mode='Markdown')


@dp.message_handler(lambda message: user_states.get(message.from_user.id) and user_states[message.from_user.id].startswith('text_buttons_'))
async def text_buttons(message: types.Message):
    bot_id = int(user_states[message.from_user.id].split('_')[2])

    await database.delete_text_buttons(bot_id)

    if message.text == '–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–Ω–æ–ø–∫–∏':
        user_states[message.from_user.id] = None

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data=f'edit_answers_{bot_id}'))

        await message.answer('‚úÖ _–¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω—ã_', reply_markup=markup, parse_mode='Markdown')
        return

    for line in message.html_text.split('\n'):
        if not re.compile(r'\[.*\s\+\s.*\]').match(line.strip()):
            await message.answer(
                '‚ùå _–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ [–Ω–∞–∑–≤–∞–Ω–∏–µ + —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏]_', 
                parse_mode='Markdown'
            )

            await database.delete_text_buttons(bot_id)
            return
        
        name, text = line.strip('[]').split(' + ')

        await database.insert_text_button(bot_id, name, text)

    user_states[message.from_user.id] = None

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data=f'edit_answers_{bot_id}'))

    await message.answer('‚úÖ _–¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã_', reply_markup=markup, parse_mode='Markdown')


