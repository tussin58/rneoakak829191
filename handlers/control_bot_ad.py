import re
import os
from aiogram import types

from bot import dp, user_states
from modules import database, bots


user_ads = {}

@dp.callback_query_handler(lambda call: call.data.startswith('start_ad_'))
async def start_ad(call: types.CallbackQuery):
    bot_id = int(call.data.split('_')[2])

    bot = await database.get_bot(bot_id)
    if not bot:
        await call.message.edit_text('ü§ñ _–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω_', parse_mode='Markdown')
        return
    
    user_states[call.from_user.id] = f'ad_text_{bot_id}'

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üîô –û—Ç–º–µ–Ω–∞', callback_data=f'control_bot_{bot_id}'))

    await call.message.edit_text('üì® *–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ GIF.*\n'
                                 '_(–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è _`{telegram_id}`_)_',
                                 reply_markup=markup, parse_mode='Markdown')


@dp.message_handler(lambda message: user_states.get(message.from_user.id) and user_states[message.from_user.id].startswith('ad_text_'), content_types=['text', 'photo', 'video', 'animation'])
async def ad_text(message: types.Message):
    bot_id = int(user_states[message.from_user.id].split('_')[2])

    bot = await database.get_bot(bot_id)
    if not bot:
        await message.answer('ü§ñ _–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω_', parse_mode='Markdown')
        return

    user_states[message.from_user.id] = f'ad_buttons_{bot_id}'
    user_ads[message.from_user.id] = {'bot_id': bot_id, 'text': message.html_text}

    if message.photo:
        user_ads[message.from_user.id]['photo'] = message.photo[-1].file_id
    elif message.video:
        user_ads[message.from_user.id]['video'] = message.video.file_id
    elif message.animation:
        user_ads[message.from_user.id]['animation'] = message.animation.file_id

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–Ω–æ–ø–∫–∏', callback_data=f'skip_buttons_{bot_id}'))

    await message.answer('üîò –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ \[—Ç–µ–∫—Å—Ç + URL] –∏–ª–∏ \[—Ç–µ–∫—Å—Ç + `webapp`]. –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥.\n'
                         'P.S. _Webapp –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–º–µ–Ω–∏—Ç—Å—è –Ω–∞ –≤–µ–±–∞–ø–ø —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –¥–æ–º–µ–Ω–æ–º._',
                            reply_markup=markup, parse_mode='Markdown')
    

@dp.message_handler(lambda message: user_states.get(message.from_user.id) and user_states[message.from_user.id].startswith('ad_buttons_'))
@dp.callback_query_handler(lambda call: call.data.startswith('skip_buttons_'))
async def ad_buttons(event_data):
    if isinstance(event_data, types.Message):
        message = event_data
        bot_id = user_ads[message.from_user.id]['bot_id']

        bot_data = await database.get_bot(bot_id)
        if not bot_data:
            await message.answer('ü§ñ _–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω_', parse_mode='Markdown')
            return

        markup = types.InlineKeyboardMarkup()

        for button in message.text.split('\n'):
            if not re.compile(r'\[.*\s\+\s(webapp|https://.*)\]').match(button.strip()):
                await message.answer(
                    '‚ùå _–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–æ–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ [—Ç–µ–∫—Å—Ç + URL] –∏–ª–∏ [—Ç–µ–∫—Å—Ç + webapp]_', 
                    parse_mode='Markdown'
                )
                return
        
            button = button.strip('[]')
            text, url = button.rsplit(' + ', 1)

            if url == 'webapp':
                url = bot_data['domain']

            markup.add(types.InlineKeyboardButton(text, web_app=types.WebAppInfo(url=url)))

        user_ads[message.from_user.id]['markup'] = markup
    else:
        call = event_data
        bot_id = int(call.data.split('_')[2])

        bot_data = await database.get_bot(bot_id)
        if not bot_data:
            await call.message.edit_text('ü§ñ _–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω_', parse_mode='Markdown')
            return

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('‚úÖ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', callback_data=f'confirm_ad_{bot_id}'),
                types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data=f'control_bot_{bot_id}'))

    if isinstance(event_data, types.Message):
        await message.answer('‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø—É—Å–∫:', reply_markup=markup)
    else:
        await call.message.edit_text('‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø—É—Å–∫:', reply_markup=markup)


@dp.callback_query_handler(lambda call: call.data.startswith('confirm_ad_'))
async def confirm_ad(call: types.CallbackQuery):
    bot_id = int(call.data.split('_')[2])

    bot_data = await database.get_bot(bot_id)
    if not bot_data:
        await call.message.edit_text('ü§ñ _–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω_', parse_mode='Markdown')
        return

    await call.message.edit_text('üì§ *"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, –≤—ã –±—É–¥–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ...*', parse_mode='Markdown')

    users = await database.get_all_constructor_users(bot_id)

    success_count = 0
    error_count = 0

    ad_data = user_ads.get(call.from_user.id)
    if not ad_data:
        await call.message.edit_text('ü§ñ _–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏_', parse_mode='Markdown')
        return

    if ad_data.get('photo'):
        await dp.bot.download_file_by_id(ad_data['photo'], 'data/' + ad_data['photo'] + '.jpg')
    elif ad_data.get('video'):
        await dp.bot.download_file_by_id(ad_data['video'], 'data/' + ad_data['video'] + '.mp4')
    elif ad_data.get('animation'):
        await dp.bot.download_file_by_id(ad_data['animation'], 'data/' + ad_data['animation'] + '.gif')

    bot = bots.created_bots.get(bot_id)
    if not bot:
        await call.message.edit_text('ü§ñ _–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞._', parse_mode='Markdown')
        return

    bot = bot['bot']

    for user in users:
        try:
            text = ad_data['text'].replace('{telegram_id}', str(user['user_id']))
            if ad_data.get('photo'):
                with open('data/' + ad_data['photo'] + '.jpg', 'rb') as file:
                    await bot.send_photo(user['user_id'], file, caption=text, reply_markup=ad_data.get('markup'), parse_mode='HTML')
            elif ad_data.get('video'):
                with open('data/' + ad_data['video'] + '.mp4', 'rb') as file:
                    await bot.send_video(user['user_id'], file, caption=text, reply_markup=ad_data.get('markup'), parse_mode='HTML')
            elif ad_data.get('animation'):
                with open('data/' + ad_data['animation'] + '.gif', 'rb') as file:
                    await bot.send_animation(user['user_id'], file, caption=text, reply_markup=ad_data.get('markup'), parse_mode='HTML')
            else:
                await bot.send_message(user['user_id'], text, reply_markup=ad_data.get('markup'), parse_mode='HTML')
            success_count += 1
        except:
            error_count += 1

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data=f'control_bot_{bot_id}'))

    if ad_data.get('photo'):
        os.remove('data/' + ad_data['photo'] + '.jpg')
    elif ad_data.get('video'):
        os.remove('data/' + ad_data['video'] + '.mp4')
    elif ad_data.get('animation'):
        os.remove('data/' + ad_data['animation'] + '.gif')

    if success_count + error_count == 0:
        await call.message.answer('‚ùå *–í –±–æ—Ç–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏.*', reply_markup=markup, parse_mode='Markdown')
        return

    await call.message.answer('‚úÖ *–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n'
                                 f'üë§ *–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* {len(users)}\n'
                                f'üì§ *–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:* {success_count}\n'
                                f'‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:* {error_count}\n'
                                f'üìà *–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞:* {success_count / (success_count + error_count) * 100:.2f}%',
                                reply_markup=markup, parse_mode='Markdown')