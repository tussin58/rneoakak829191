import re
import asyncio
from aiogram import types

from bot import dp, user_states
from modules import database, bots


@dp.callback_query_handler(lambda call: call.data.startswith('interval_ad_'))
async def interval_ad(call: types.CallbackQuery):
    bot_id = int(call.data.split('_')[2])

    bot = await database.get_bot(bot_id)
    if not bot:
        await call.message.edit_text('ü§ñ _–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω_', parse_mode='Markdown')
        return

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('‚è±Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª', callback_data=f'set_intad_{bot_id}'),
                types.InlineKeyboardButton('üìù –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data=f'msg_intad_{bot_id}'))
    if bot['interval_ad_status'] == 1:
        markup.add(types.InlineKeyboardButton('‚ùå –í—ã–∫–ª—é—á–∏—Ç—å', callback_data=f'status_intad_{bot_id}'))
    else:
        markup.add(types.InlineKeyboardButton('‚úÖ –í–∫–ª—é—á–∏—Ç—å', callback_data=f'status_intad_{bot_id}'))
    markup.add(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data=f'control_bot_{bot_id}'))

    interval_hours = bot['interval_ad_time'] // 60
    interval_minutes = bot['interval_ad_time'] % 60

    await call.message.edit_text(f'''‚öôÔ∏è *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:*
‚è± *–ò–Ω—Ç–µ—Ä–≤–∞–ª:* `{interval_hours} —á. {interval_minutes} –º–∏–Ω.`
üìù *–¢–µ–∫—Å—Ç:* \n`{bot['interval_ad_text'] if bot['interval_ad_text'] else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}`
üîò *–ö–Ω–æ–ø–∫–∏:* \n`{bot['interval_ad_buttons'] if bot['interval_ad_buttons'] else '‚ùå –ö–Ω–æ–ø–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã'}`''',\
                                reply_markup=markup, parse_mode='Markdown')


@dp.callback_query_handler(lambda call: call.data.startswith('set_intad_'))
async def set_intad(call: types.CallbackQuery):
    bot_id = int(call.data.split('_')[2])

    user_states[call.from_user.id] = f'set_intad_{bot_id}'

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üîô –û—Ç–º–µ–Ω–∞', callback_data=f'interval_ad_{bot_id}'))

    await call.message.edit_text('‚è± *–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö (–æ—Ç 60 –¥–æ 2880):*', reply_markup=markup, parse_mode='Markdown')


@dp.message_handler(lambda message: user_states.get(message.from_user.id) and user_states[message.from_user.id].startswith('set_intad_'))
async def set_intad(message: types.Message):
    bot_id = int(user_states[message.from_user.id].split('_')[2])

    bot = await database.get_bot(bot_id)
    if not bot:
        await message.answer('ü§ñ _–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω_', parse_mode='Markdown')
        return

    interval = int(message.text.strip())
    if interval < 60 or interval > 2880:
        await message.answer('‚ö†Ô∏è _–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 60 –¥–æ 2880 –º–∏–Ω—É—Ç_', parse_mode='Markdown')
        return

    user_states[message.from_user.id] = None

    await database.update_bot(bot_id, 'interval_ad_time', interval)

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data=f'interval_ad_{bot_id}'))

    await message.answer('‚úÖ _–ò–Ω—Ç–µ—Ä–≤–∞–ª —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω_', reply_markup=markup, parse_mode='Markdown')


@dp.callback_query_handler(lambda call: call.data.startswith('msg_intad_'))
async def msg_intad(call: types.CallbackQuery):
    bot_id = int(call.data.split('_')[2])

    user_states[call.from_user.id] = f'msg_intad_{bot_id}'

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üîô –û—Ç–º–µ–Ω–∞', callback_data=f'interval_ad_{bot_id}'))

    await call.message.edit_text('üìù *–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏.*\n'
                                 '–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ GIF.\n'
                                '_(–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)_',
                                reply_markup=markup, parse_mode='Markdown')


@dp.message_handler(lambda message: user_states.get(message.from_user.id) and user_states[message.from_user.id].startswith('msg_intad_'), content_types=['text', 'photo', 'video', 'animation'])
async def msg_intad(message: types.Message):
    bot_id = int(user_states[message.from_user.id].split('_')[2])

    bot = await database.get_bot(bot_id)
    if not bot:
        await message.answer('ü§ñ _–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω_', parse_mode='Markdown')
        return

    user_states[message.from_user.id] = f'buttons_intad_{bot_id}'

    if message.photo:
        await dp.bot.download_file_by_id(message.photo[-1].file_id, 'data/media/ad_' + str(bot_id) + '.jpg')
        await database.update_bot(bot_id, 'interval_ad_media_type', 'photo')
    elif message.video:
        await dp.bot.download_file_by_id(message.video.file_id, 'data/media/ad_' + str(bot_id) + '.mp4')
        await database.update_bot(bot_id, 'interval_ad_media_type', 'video')
    elif message.animation:
        await dp.bot.download_file_by_id(message.animation.file_id, 'data/media/ad_' + str(bot_id) + '.gif')
        await database.update_bot(bot_id, 'interval_ad_media_type', 'animation')
    else:
        await database.update_bot(bot_id, 'interval_ad_media_type', None)

    await database.update_bot(bot_id, 'interval_ad_text', message.html_text)

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–Ω–æ–ø–∫–∏', callback_data=f'ad_skip_buttons_{bot_id}'))

    await message.answer('üîò –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ \[—Ç–µ–∫—Å—Ç + URL] –∏–ª–∏ \[—Ç–µ–∫—Å—Ç + `webapp`]. –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥.\n'
                         'P.S. _Webapp –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–º–µ–Ω–∏—Ç—Å—è –Ω–∞ –≤–µ–±–∞–ø–ø —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –¥–æ–º–µ–Ω–æ–º._',
                         reply_markup=markup, parse_mode='Markdown')
    

@dp.message_handler(lambda message: user_states.get(message.from_user.id) and user_states[message.from_user.id].startswith('buttons_intad_'))
@dp.callback_query_handler(lambda call: call.data.startswith('ad_skip_buttons_'))
async def buttons_intad(event_data):
    if isinstance(event_data, types.Message):
        message = event_data
        bot_id = int(user_states[message.from_user.id].split('_')[2])
    else:
        call = event_data
        bot_id = int(call.data.split('_')[3])

    bot = await database.get_bot(bot_id)
    if not bot:
        await message.answer('ü§ñ _–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω_', parse_mode='Markdown')
        return

    if isinstance(event_data, types.Message):
        for button in message.text.split('\n'):
            if not re.compile(r'\[.*\s\+\s(webapp|https://.*)\]').match(button.strip()):
                await message.answer('‚ùå –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \[—Ç–µ–∫—Å—Ç + URL] –∏–ª–∏ \[—Ç–µ–∫—Å—Ç + `webapp`]', parse_mode='Markdown')
                return

        if len(message.text.split('\n')) >= 25:
            await message.answer('‚ùå _–ú–∞–∫—Å–∏–º—É–º 25 –∫–Ω–æ–ø–æ–∫_', parse_mode='Markdown')
            return

        await database.update_bot(bot_id, 'interval_ad_buttons', message.text)
    else:
        await database.update_bot(bot_id, 'interval_ad_buttons', None)

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data=f'interval_ad_{bot_id}'))

    if isinstance(event_data, types.Message):
        await message.answer('‚úÖ _–ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!_', reply_markup=markup, parse_mode='Markdown')
    else:
        await call.message.edit_text('‚úÖ _–ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã_', reply_markup=markup, parse_mode='Markdown')


async def start_interval_ad(bot_id, bot, interval, message, buttons):
    while True:
        markup = types.InlineKeyboardMarkup()
        
        await asyncio.sleep(interval * 60)

        users = await database.get_all_constructor_users(bot_id)

        bot_data = await database.get_bot(bot_id)

        if buttons:
            for button in buttons.split('\n'):
                button = button.strip('[]')
                text, url = button.rsplit(' + ', 1)

                if url == 'webapp':
                    url = bot_data['domain']

                markup.add(types.InlineKeyboardButton(text, web_app=types.WebAppInfo(url=url)))
        
        for user in users:
            try:
                if bot_data['interval_ad_media_type'] == 'photo':
                    with open('data/media/ad_' + str(bot_id) + '.jpg', 'rb') as photo:
                        await bot.send_photo(user['user_id'], photo, caption=message, reply_markup=markup, parse_mode='HTML')
                elif bot_data['interval_ad_media_type'] == 'video':
                    with open('data/media/ad_' + str(bot_id) + '.mp4', 'rb') as video:
                        await bot.send_video(user['user_id'], video, caption=message, reply_markup=markup, parse_mode='HTML')
                elif bot_data['interval_ad_media_type'] == 'animation':
                    with open('data/media/ad_' + str(bot_id) + '.gif', 'rb') as animation:
                        await bot.send_animation(user['user_id'], animation, caption=message, reply_markup=markup, parse_mode='HTML')
                else:
                    await bot.send_message(user['user_id'], message, reply_markup=markup, parse_mode='HTML')
            except:
                pass


@dp.callback_query_handler(lambda call: call.data.startswith('status_intad_'))
async def status_intad(call: types.CallbackQuery):
    bot_id = int(call.data.split('_')[2])

    bot = await database.get_bot(bot_id)
    if not bot:
        await call.message.edit_text('ü§ñ _–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω_', parse_mode='Markdown')
        return
    
    if not bot['interval_ad_text'] and not bot['interval_ad_media_type']:
        await call.answer('‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏', show_alert=True)
        return

    if bot['interval_ad_status'] == 1:
        if bots.created_bots[bot_id].get('interval_ad_task'):
            bots.created_bots[bot_id]['interval_ad_task'].cancel()
            try:
                await bots.created_bots[bot_id]['interval_ad_task']
            except asyncio.CancelledError:
                pass

            bots.created_bots[bot_id]['interval_ad_task'] = None

        await database.update_bot(bot_id, 'interval_ad_status', 0)
    else:
        if not bots.created_bots[bot_id].get('interval_ad_task'):
            bots.created_bots[bot_id]['interval_ad_task'] = asyncio.create_task(start_interval_ad(bot_id, bots.created_bots[bot_id]['bot'], bot['interval_ad_time'], bot['interval_ad_text'], bot['interval_ad_buttons']))
        else:
            await call.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏', show_alert=True)
            return
        
        await database.update_bot(bot_id, 'interval_ad_status', 1)

    markup = types.InlineKeyboardMarkup()
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('‚è±Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª', callback_data=f'set_intad_{bot_id}'),
                types.InlineKeyboardButton('üìù –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data=f'msg_intad_{bot_id}'))
    if bot['interval_ad_status'] == 0:
        markup.add(types.InlineKeyboardButton('‚ùå –í—ã–∫–ª—é—á–∏—Ç—å', callback_data=f'status_intad_{bot_id}'))
    else:
        markup.add(types.InlineKeyboardButton('‚úÖ –í–∫–ª—é—á–∏—Ç—å', callback_data=f'status_intad_{bot_id}'))

    markup.add(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data=f'control_bot_{bot_id}'))

    await call.message.edit_reply_markup(reply_markup=markup)